import logging

from DB.db_obj import DbTgUsers, DbStageResults, DbSubsAtheleteClass
from DB.models import Subscriber, TelegramUser

logger = logging.getLogger("app.DB.database")


def add_stage_result(result) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}")
    client = DbStageResults()
    client.add(result)
    return result


def update_stage_result(result):
    """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞"""
    logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}")
    client = DbStageResults()
    client.del_result(result.sportsman_id)
    add_stage_result(result)
    return result


def find_one_sportsman_from_stage(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∏–∑ —ç—Ç–∞–ø–∞"""
    db_client = DbStageResults()
    return db_client.get(user_id)


def add_subscriber(user_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = DbTgUsers()
    db.add_tg_subscriber(user_id)
    db.close()

def update_user_subs(message, sport_class, user_sub: str):
    """ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—é—â–∞—è —Å–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    tg_user = TelegramUser(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.full_name,
        message.from_user.language_code,
        message.from_user.mention
    )

    logger.info(f"update {tg_user.tg_id} : {sport_class}")
    client = DbTgUsers()
    tg_client = client.get_tg_subscriber(tg_user.tg_id)

    subs_athelete = DbSubsAtheleteClass()

    if tg_client is None:
        """ –µ–±–∞–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞, –Ω–∞–¥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∏ 2 —Ç–∞–±–ª–∏—Ü–∞—Ö
        ---- Add ----
        """
        client.add_tg_subscriber(tg_user)
        tg_client = client.get_tg_subscriber(tg_user.tg_id)
        """ 
         –ø—Ä–æ–¥—É–º–∞—Ç—å —á—Ç–æ —é–∑–µ—Ä –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –¥–∞—Ç–∞–∫–ª–∞—Å—Å, –ª–∏–±–æ –∫–∞–∫-—Ç–æ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å –∏—Ö
         –∏–ª–∏ –≤–æ–æ–±—â–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫—É
        """
        if tg_client is None:

            DbTgUsers().add_tg_subscriber(tg_user)
        tg_subscriber = Subscriber(tg_client["_id"], tg_client["sub_stage"], tg_client["sub_stage_cat"])

        client.add_tg_subscriber(tg_user,  # –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                                 tg_subscriber.sub_stage_categories)
        try:
            subs_athelete.add_subscriber(
                user_sub, tg_subscriber.subscriber_id
            )  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É
        except ValueError:
            logger.info("–ù–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç.–∫. —É–∂–µ –µ—Å—Ç—å")
        logger.info(f"New subscriber id: {tg_subscriber.subscriber_id} {sport_class}")
        """ --- recursion --- """
        update_user_subs(message, sport_class, user_sub)
        return "üò∏ You are welcome üò∏"
    else:
        tg_subscriber = Subscriber(
            tg_client["_id"], tg_client["sub_stage"], tg_client["sub_stage_cat"]
        )
        if user_sub in tg_subscriber.sub_stage_categories:
            """Sub OFF"""
            tg_subscriber.sub_stage_categories.remove(user_sub)
            client.update(
                tg_subscriber.subscriber_id,
                "sub_stage_cat",
                tg_subscriber.sub_stage_categories,
            )
            try:
                subs_athelete.remove_subscriber(user_sub, tg_subscriber.subscriber_id)
            except ValueError:
                logger.error("–ù–µ —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç.–∫. –µ–≥–æ –Ω–µ—Ç")
            return f"–í—ã —É—Å–ø–µ—à–Ω–æ –û–¢–ü–ò–°–ê–õ–ò–°–¨ –æ—Ç {sport_class}"

        else:
            """SUB ON"""
            tg_subscriber.sub_stage_categories.append(user_sub)
            client.update(
                tg_subscriber.subscriber_id,
                "sub_stage_cat",
                tg_subscriber.sub_stage_categories,
            )
            try:
                subs_athelete.add_subscriber(user_sub, tg_subscriber.subscriber_id)
            except ValueError:
                logger.info("–ù–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∞–∫–∞–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            return f"–í—ã —É—Å–ø–µ—à–Ω–æ –ü–û–î–ü–ò–°–ê–õ–ò–°–¨ –Ω–∞ {sport_class}"


if __name__ == "__main__":
    pass
