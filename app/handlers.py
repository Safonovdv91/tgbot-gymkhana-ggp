import logging

from aiogram import Bot, F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from aio_bot import aio_bot_functions, aio_markups as nav, config_bot
from aio_bot.aio_bot_functions import BotFunction, BotInterface, DoBet
from aio_bot.aio_markups import btnBackToMenu
from app.betting.sender import BettingMessageSender
from app.bot_states import BotStates
from app.constants import BAD_MESSAGE, HELP_MESSAGE, START_MESSAGE
from DB import database as DBM
from DB.db_obj import DbBetTime, DbStageResults, DbTgUsers
from DB.models import BetTimeTelegramUser, TelegramUser

router = Router()
logger = logging.getLogger(__name__)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def start_bot(message: types.Message):
    logger.info("–ó–∞–ø—É—Å—Ç–∏–ª /start %s", message.from_user.username)
    await message.answer(START_MESSAGE, reply_markup=nav.main_menu)


@router.message(Command("help"))
async def help_bot(message: types.Message):
    await message.answer(HELP_MESSAGE)


@router.message(Command("unsub"))
async def unsubscribe_bot(message: types.Message):
    """–£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(
        "User unsub. Delete him.",
        extra={
            "id": message.from_user.id,
            "username": message.from_user.username,
        },
    )
    BotInterface.unsub_tguser(message.from_user.id)
    await message.answer("–ü—Ä–æ—â–∞–π –¥—Ä—É–≥ üòø")


@router.message(Command("broadcast"))
async def broadcast_message_to_all_users(message: types.Message, state: FSMContext):
    logger.info("–ù–∞—á–∞–ª –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É %s", message.from_user.id)
    if message.from_user.id != config_bot.config["admin_id"]:
        logger.warning(
            "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–∞–¥–∫–∞—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s | [%s]",
            message.from_user.full_name,
            message.from_user.id,
        )
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º, –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ–∞–¥–∫–∞—Å—Ç–∞")
        return
    await state.set_state(BotStates.Broadcasting)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:")


@router.message(Command("list_all_users"))
async def get_all_users(message: types.Message):
    logger.info("–ó–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %s", message.from_user.full_name)
    if message.from_user.id != config_bot.config["admin_id"]:
        logger.warning(
            "–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s | [%s]",
            message.from_user.full_name,
            message.from_user.id,
        )
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º, –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ–∞–¥–∫–∞—Å—Ç–∞")
        return
    users = DbTgUsers().get_all_subscribers()
    text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n"
    count = 0
    for user in users:
        count += 1
        text += f"{user["_id"]} "
    text += f"\n–í—Å–µ–≥–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    await message.answer(text)


@router.message(BotStates.Broadcasting)
async def send_message_to_all_users(message: types.Message, state: FSMContext):
    users = DbTgUsers().get_all_subscribers()
    for user in users:
        await BotMessageSender().send_msg(
            user_id=user["_id"], message=message.text, nav_menu=nav.main_menu
        )
    await state.clear()


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å üó∫ —ç—Ç–∞–ø–∞")
async def send_map(message: types.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å üó∫ —ç—Ç–∞–ø–∞":
        logger.info(
            "–ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã %s",
            message.from_user.full_name,
        )
        try:
            if config_bot.config_gymchana_cup["trackUrl"]:
                track_url = (
                    f"https://gymkhana-cup.ru/competitions/special-stage?"
                    f"id={config_bot.config_gymchana_cup['id_stage_now']}"
                )
                await message.answer_photo(
                    photo=config_bot.config_gymchana_cup["trackUrl"],
                    caption=track_url,
                )
            else:
                await message.answer("–°–µ–π—á–∞—Å –º–µ–∂—Å–µ–∑–æ–Ω—å–µ –º—ç–Ω, –ø–æ–∫–∞—Ç–∞–π –±–∞–∑–æ–≤—É—é —Ñ–∏–≥—É—Ä—É")
        except Exception as e:
            logger.exception(
                "–ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã —ç—Ç–∞–ø–∞" " %s",
                message.from_user.id,
            )
            await message.answer(
                "–ë—Ä–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ 8'(- —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–µ—Ä–≤–∞–∫ –ª–µ–∂–∏—Ç,"
                " –∑–∞–ø—Ä–æ—Å–∏ –∫–∞—Ä—Ç—É –ø–æ–ø–æ–∑–∂–µ..."
            )
            await message.answer(
                "‚ùó –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã —ç—Ç–∞–ø–∞ –æ—Ç" " {} \n{}".format(
                    message.from_user.id, e
                )
            )


@router.message(F.text == "‚åö –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è GGP")
async def make_bet(message: types.Message, state: FSMContext):
    db_bet = DbBetTime().get(tg_id=message.from_user.id)
    logger.info("–ù–∞—á–∞–ª –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: %s", message.from_user.username)

    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ
    if db_bet:
        logger.info("%s - —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ", message.from_user.username)
        user = TelegramUser(
            tg_id=db_bet["tg_user"]["tg_id"],
            username=db_bet["tg_user"]["username"],
            first_name=db_bet["tg_user"]["first_name"],
            full_name=db_bet["tg_user"]["full_name"],
            language_code=db_bet["tg_user"]["language_code"],
        )
        bet = BetTimeTelegramUser(
            tg_user=user,
            bet_time1=db_bet["bet_time1"],
            date_bet1=db_bet["date_bet1"],
        )
        nickname = f"Nickname: {bet.tg_user.username}"
        bet_time = f"Bet time: {BotFunction.msec_to_mmssms(bet.bet_time1)}"
        bet_date = f"Bet date: {bet.date_bet1}"
        text = f"{nickname}\n{bet_time}\n{bet_date}"
        if not DoBet.is_can_bet():
            await message.answer(
                "–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –æ–∫–æ–Ω—á–µ–Ω:\n–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n{}".format(text),
                reply_markup=nav.main_menu,
            )
            text = await BettingMessageSender.get_sorted_bets()
            if text:
                await message.answer(text, reply_markup=nav.main_menu)
            await state.clear()
            return

        await message.answer(
            f"–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n{text}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É"),
                        KeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É"),
                    ],
                    [btnBackToMenu],
                ],
                resize_keyboard=True,
            ),
        )
        await state.set_state(BotStates.Doing_bet)
    else:
        logger.info("–î–µ–ª–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É %s", message.from_user.username)
        if not DoBet.is_can_bet():
            await message.answer(
                "–ü—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ –æ–∫–æ–Ω—á–µ–Ω, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É—Å–ø–µ–ª, "
                "–ø–æ–ø—Ä–æ–±—É–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ, "
                "–ø—Ä–∏—ë–º —Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –¥–ª–∏—Ç—Å—è 1 –Ω–µ–¥–µ–ª—é —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞.",
                reply_markup=nav.main_menu,
            )
            return
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ–∂–∏–∞–¥–∞–µ—Ç–µ —á—Ç–æ –ø—Ä–æ–µ–¥–µ—Ç"
            " –ª—É—á—à–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω\n"
            "–ü—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ {}".format(config_bot.config_gymchana_cup["end_bet_time"]),
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[btnBackToMenu]],
                resize_keyboard=True,
                input_field_placeholder="45.67 –∏–ª–∏ 01:02.34",
            ),
        )
        await state.set_state(BotStates.Get_betting_time)


@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe_ggp_class(message: types.Message, state: FSMContext):
    logger.info("–ù–∞—á–∞–ª –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–ª–∞—Å—Å—ã: %s", message.from_user.username)
    await state.set_state(BotStates.GGP_CLASS_SUBSCRIBE)
    await subscribe_ggp(message, state)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–π –∫–ª–∞—Å—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
        reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
    )


@router.message(BotStates.GGP_CLASS_SUBSCRIBE)
async def subscribe_ggp(message: types.Message, state: FSMContext):
    if message.text == "‚¨Ö –ù–ê–ó–ê–î":
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=nav.main_menu,
        )
        await state.clear()
    elif message.text in ("üü• üÖ∞Ô∏è", "üî≤ üÖ∞Ô∏è"):
        await message.answer(
            DBM.update_user_subs(message, "üü•A", "A"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü¶ üáß", "üî≤ üáß"):
        await message.answer(
            DBM.update_user_subs(message, "üü¶üáß", "B"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü© –°1", "üî≤ –°1"):
        await message.answer(
            DBM.update_user_subs(message, "üü© –°1", "C1"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü© –°2", "üî≤ –°2"):
        await message.answer(
            DBM.update_user_subs(message, "üü© –°2", "C2"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü© –°3", "üî≤ –°3"):
        await message.answer(
            DBM.update_user_subs(message, "üü© –°3", "C3"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü® D1", "üî≤ D1"):
        await message.answer(
            DBM.update_user_subs(message, "üü® D1", "D1"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü® D2", "üî≤ D2"):
        await message.answer(
            DBM.update_user_subs(message, "üü® D2", "D2"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü® D3", "üî≤ D3"):
        await message.answer(
            DBM.update_user_subs(message, "üü® D3", "D3"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )
    elif message.text in ("üü® D4", "üî≤ D4"):
        await message.answer(
            DBM.update_user_subs(message, "üü® D4", "D4"),
            reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id),
        )


@router.message()
async def get_time_stage(message: types.Message):
    if message.text == "‚¨Ö –ù–ê–ó–ê–î":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.main_menu)

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å üïó —ç—Ç–∞–ø–∞":
        logger.info("–ó–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É %s", message.from_user.username)
        if config_bot.config_gymchana_cup["trackUrl"] is False:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            return
        b_result = DbStageResults().get_best_stage_time()
        if b_result is None:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            text = aio_bot_functions.BotFunction().make_calculate_text(b_result)
            await message.answer(text)

    else:
        try:
            best_time_ms = aio_bot_functions.BotFunction().convert_to_milliseconds(message.text)
            if best_time_ms > 0:
                text = aio_bot_functions.BotFunction().make_calculate_text(best_time_ms)
                mmssms = aio_bot_functions.BotFunction().msec_to_mmssms(best_time_ms)
                text = f"–î–ª—è –≤—Ä–µ–º–µ–Ω–∏: {mmssms} \n{text}"
                await message.answer(text, reply_markup=nav.main_menu)
            else:
                await message.answer(
                    BAD_MESSAGE,
                    reply_markup=nav.main_menu,
                )
        except TypeError:
            logger.warning(
                "User: %s [%s] –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —á–∏—Å–ª–æ.",
                message.from_user.username,
                message.from_user.id,
            )
            await message.answer(
                BAD_MESSAGE,
                reply_markup=nav.main_menu,
            )
        except Exception:
            logger.exception("Common error:")
            await message.answer(
                BAD_MESSAGE,
                reply_markup=nav.main_menu,
            )


class BotMessageSender:
    def __init__(self):
        self.API_bot = config_bot.config["API_token"]
        self.bot = Bot(token=self.API_bot)

    async def send_msg(self, user_id: int, message: str, nav_menu=nav.main_menu):
        logger.info("–í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ %s / %s", user_id, message)
        try:
            await self.bot.send_message(chat_id=user_id, text=message, reply_markup=nav_menu)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        await self.close()

    async def broadcast_msg(self, users_id: list[int], message: str):
        for user_id in users_id:
            await self.send_msg(user_id, message)

    async def close(self):
        logger.debug("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ aiogram")
        await self.bot.session.close()
