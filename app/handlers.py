from aiogram import Router, types
from aio_bot import aio_markups as nav
from aiogram.filters import CommandStart, Command
from aiogram.types import InputFile

from aio_bot.aio_bot_functions import BotInterface
from aio_bot import config_bot
from DB import database as DBM
from DB.db_obj import DbStageResults

# import os
import logger.my_logger
import logging.handlers
from aio_bot import aio_bot_functions

router = Router()
logger = logging.getLogger("app")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def start_bot(message: types.Message):
    text = "–û–ª–æ—Ö–∞ –º–æ–π –¥–∂–∏–º—Ö–æ –¥—Ä—É–≥, —è –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –º–æ—Ç–æ–¥–∂–∏–º—Ö–∞–Ω–µ, –Ω–µ –±—É–¥–µ–º " \
           "–∑–∞—Ç—è–≥–∏–≤–∞—Ç—å –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é: \n" \
           "'‚úí–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ " \
           "–∫–∞—Ç–∞—é—â–∏—Ö —ç—Ç–∞–ø GGP 2023. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' –∏ –≤—ã–±–∏—Ä–∞–π –∫–ª–∞—Å—Å—ã –∫–æ—Ç–æ—Ä—ã–µ" \
           " —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ " \
           "–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ª–æ–∂–∞—Ç - —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. \n " \
           "–ü–æ–ª—É—á–∏—Ç—å üó∫ —ç—Ç–∞–ø–∞' - —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø GGP 2023, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª –∫—É–¥–∞ –µ—Ö–∞—Ç—å" \
           " - –Ω–∞–∂–∏–º–∞–π –∏ —É—á–∏. \n" \
           " '–ü–æ–ª—É—á–∏—Ç—å üïó —ç—Ç–∞–ø–∞' - —Å—á–∏—Ç–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã" \
           " —É–ª—É—á—à–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç," \
           " —á—Ç–æ –±—ã —Ç—ã –º–æ–≥ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–∞–µ—à—å.\n\n" \
           "üßÆ –ê –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å –º–Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ mm:ss.ms –∏–ª–∏ ss.ms –∏ " \
           "–ø–æ–ª—É—á–∏—à—å –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞."
    await message.answer(text, reply_markup=nav.mainMenu)


@router.message(Command("help"))
async def help_bot(message: types.Message):
    text = "–ï—â—ë —Ä–∞–∑ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n" \
           "–í–Ω–∏–∑—É –∏–º–µ–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–µ–Ω—é (–≥–¥–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ '–ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ãüìé') –Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –º–µ–Ω—é –∏ " \
           "–æ—Ç–∫—Ä–æ—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n" \
           "'‚úí–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' –Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –Ω–µ—ë, –∏ —Ç–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å –æ—Ç –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, " \
           "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–µ–±—è –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–∞–ø—Ä–∏–º–µ—Ä (üü® D1 –∏  üü¶üáß) - —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –Ω–∏—Ö," \
           " –∞ –∫–æ–≥–¥–∞ —Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—à—å –∏ –ø–æ–≤—ã—Å–∏—à—å —Å–≤–æ–π –Ω–∞–≤—ã–∫ —Ç–æ —Å–º–µ–ª–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üü® D1 –∏ üü© –°3 - –∏ –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö " \
           "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö üü® D1 \n" \
           "'–ü–æ–ª—É—á–∏—Ç—å üó∫ —ç—Ç–∞–ø–∞' - –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–∏—à—å –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å " \
           "–∫—É–¥–∞ —Ç–∞–º –µ—Ö–∞—Ç—å –¥–∞–ª—å—à–µ —Ç–æ ;)\n" \
           "'–ü–æ–ª—É—á–∏—Ç—å üïó —ç—Ç–∞–ø–∞' - –æ—Ç–ª–∏—á–Ω–æ, —Ç—ã –ø—Ä–æ–µ—Ö–∞–ª —Ç—Ä–∞—Å—Å—É –ø–æ–∫–∞–∑–∞–≤ —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –∏ —Ç–µ–±–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —É–∑–Ω–∞—Ç—å " \
           "—Å–≤–æ–π –∫–ª–∞—Å—Å! –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å—á—ë—Ç–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∞–Ω–∞–ª–æ–≥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞).\n" \
           "üßÆ –ê –µ—â—ë —Ç—ã –º–æ–∂–µ—à—å –º–Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ mm:ss.ms –∏–ª–∏ ss.ms –∏ –ø–æ–ª—É—á–∏—à—å –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞."
    await message.answer(text)


@router.message(Command("unsub"))
async def unsubscribe_bot(message: types.Message):
    """–£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User unsub - {message.from_user.id}. Delete him.")
    BotInterface.unsub_tguser(message.from_user.id)
    await message.answer("–ü—Ä–æ—â–∞–π –¥—Ä—É–≥ üòø")


@router.message()
async def subscribe_results(message: types.Message):
    """ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–π –∫–ª–∞—Å—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                               reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü• üÖ∞Ô∏è", "üî≤ üÖ∞Ô∏è"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü•A", "A"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü¶ üáß", "üî≤ üáß"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü¶üáß", "B"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü© –°1", "üî≤ –°1"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü© –°1", "C1"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü© –°2", "üî≤ –°2"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü© –°2", "C2"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü© –°3", "üî≤ –°3"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü© –°3", "C3"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü® D1", "üî≤ D1"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü® D1", "D1"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü® D2", "üî≤ D2"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü® D2", "D2"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü® D3", "üî≤ D3"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü® D3", "D3"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text in ("üü® D4", "üî≤ D4"):
        await message.answer(DBM.update_user_subs(message.from_user.id, "üü® D4", "D4"),
                             reply_markup=nav.SubscriberMenu().subscriber_menu_btn(message.from_user.id))
    elif message.text == "‚¨Ö –ù–ê–ó–ê–î":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav.mainMenu)

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å üó∫ —ç—Ç–∞–ø–∞":
        logger.info(f"–ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –æ—Ç {message.from_user.id}")
        try:
            if config_bot.config_gymchana_cup["trackUrl"]:
                url = f"https://gymkhana-cup.ru/competitions/special-stage?id={config_bot.config_gymchana_cup['id_stage_now']}"
                await message.answer(url)
                photo = InputFile("DB/stage.jpg")
                await message.answer(photo=photo)
            else:
                await message.answer(" –°–µ–π—á–∞—Å –º–µ–∂—Å–µ–∑–æ–Ω—å–µ –º—ç–Ω, –ø–æ–∫–∞—Ç–∞–π –±–∞–∑–æ–≤—É—é —Ñ–∏–≥—É—Ä—É")
        except Exception as e:
            logger.exception(f"–ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã —ç—Ç–∞–ø–∞ {message.from_user.id} : -", e)
            await message.answer("–ë—Ä–æ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ 8'(- —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–µ—Ä–≤–∞–∫ –ª–µ–∂–∏—Ç, –∑–∞–ø—Ä–æ—Å–∏ –∫–∞—Ä—Ç—É –ø–æ–ø–æ–∑–∂–µ...")
            # await message.answer(f'‚ùó –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã —ç—Ç–∞–ø–∞ –æ—Ç {message.from_user.id}:'
            #                                  f'\n {e}')

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å üïó —ç—Ç–∞–ø–∞":
        b_result = DbStageResults().get_bestStage_time()
        if b_result is None:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            text = aio_bot_functions.BotFunction().make_calculate_text(b_result)
            await message.answer(text)
    else:
        try:
            best_time_ms = aio_bot_functions.BotFunction().convert_to_milliseconds(message.text)
            if best_time_ms > 0:
                text = aio_bot_functions.BotFunction().make_calculate_text(best_time_ms)
                mmssms = aio_bot_functions.BotFunction().msec_to_mmssms(best_time_ms)
                text = f"–î–ª—è –≤—Ä–µ–º–µ–Ω–∏: {mmssms} \n{text}"
                await message.answer(text, reply_markup=nav.mainMenu)
            else:
                await message.answer('–ë—Ä–∞—Ç–∏—à–∫–∞, –Ω–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–∏—Å–∞—Ç—å,'
                                     ' –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–µ–Ω—é ;)‚Üò –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help',
                                     reply_markup=nav.mainMenu)
        except Exception as e:
            logger.exception(f"Common error: {e}", exc_info=True)
            await message.answer('–ë—Ä–∞—Ç–∏—à–∫–∞, –Ω–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø–∏—Å–∞—Ç—å,'
                                 ' –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–µ–Ω—é ;)‚Üò –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help',
                                 reply_markup=nav.mainMenu)
