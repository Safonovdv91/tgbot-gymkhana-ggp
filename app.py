from aiogram import exceptions
from aiogram import Bot, Dispatcher
from aio_bot import config_bot
from DB import database as DBM
from DB.db_obj import DbStageResults, DbSubsAtheleteClass
from DB.models import StageSportsmanResult

# import os
import logger.my_logger
import logging.handlers
import asyncio
import get_info_api
from aio_bot.aio_bot_functions import BotInterface
from app.handlers import router

API_bot = config_bot.config["API_token"]
admin_id = config_bot.config["admin_id"]

logger.my_logger.init_logger("app", sh_level=10, fh_level=30)
logger = logging.getLogger("app")
logger.info("Server is starting...")
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=API_bot)
dp = Dispatcher()


#
# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–∞–ø–∞ ---
async def scheduled():
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ —Ä–∞c—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    while True:
        try:
            logger.info("–¢–∏–∫ –±–æ—Ç–∞")
            await asyncio.sleep(config_bot.config_gymchana_cup["GET_TIME_OUT"])
            data_dic = await get_info_api.get_sportsmans_from_ggp_stage()
            logger.debug(f" timeout = {config_bot.config_gymchana_cup['GET_TIME_OUT']}")
            if not data_dic:
                continue
            """--- New stage! ---
            if id_stage_now != config_bot.config_gymchana_cup["id_stage_now"]:
                for each in DbTgUsers().get_all_subscribers():
                    if len(each["sub_stage_cat"]):
                        !!! download_stage_map !!!
                        new_stage_msg = f"–£—Ä–∞, –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —ç—Ç–∞–ø! –ù–∞–¥–µ—é—Å—å –ø–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç—å —Ç–µ–±–µ Ô∏è‚òÄÔ∏è‚òÄÔ∏è," \
                                        f" –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ ü§©! –ü–æ–º–Ω–∏ —á—Ç–æ –ø–µ—Ä–≤—ã–º –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ " \
                                        f"–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–µ–∑–¥–∞!\n –ù–æ –∏ –ø–µ—Ä–≤—ã–º –∫—Ç–æ –≤—ã–ª–æ–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!üòâ " \
                                        f"{config_bot.config_gymchana_cup['trackUrl']}"
                        await bot.send_message(each["_id"], new_stage_msg)
            --- New stage ---"""
            get_results_from_stage = data_dic["results"]

            for each in get_results_from_stage:
                b_result = DbStageResults().get_bestStage_time()
                msg_text = False
                sportsman_result = StageSportsmanResult(
                    each["userId"],
                    each["userFullName"],
                    each["motorcycle"],
                    each["userCity"],
                    each["userCountry"],
                    each["athleteClass"],
                    each["resultTimeSeconds"],
                    each["resultTime"],
                    each["fine"],
                    each["video"],
                )

                db_sportsman = DBM.find_one_sportsman_from_stage(each["userId"])

                if db_sportsman is None:
                    if b_result is None:
                        persents = 100
                    else:
                        persents = round(each["resultTimeSeconds"] / b_result * 100, 2)
                    msg_text = (
                        f" {each['athleteClass']}: {each['userFullName']} \n "
                        f"{persents}% |   {each['resultTime']}\n"
                        f"{each['video']}"
                    )

                    msg_text = f"‚ö° –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n{msg_text}"

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    DBM.add_stage_result(sportsman_result)

                else:
                    if each["resultTimeSeconds"] < db_sportsman["resultTimeSeconds"]:
                        if b_result is None:
                            persents = 100
                        else:
                            persents = round(
                                each["resultTimeSeconds"] / b_result * 100, 2
                            )

                        msg_text = (
                            f" {each['athleteClass']}: {each['userFullName']} \n "
                            f"{persents}% |   {each['resultTime']}\n"
                            f"–±—ã–ª–æ:   |   [{db_sportsman['resultTime']}] \n {each['video']} "
                        )
                        msg_text = f"üí• –£–ª—É—á—à–∏–ª –≤—Ä–µ–º—è\n {msg_text}"

                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        DBM.update_stage_result(sportsman_result)

                # –†–∞c—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                if msg_text:
                    tg_clients = DbSubsAtheleteClass().get_subscriber(
                        each["athleteClass"]
                    )

                    for tg_client in tg_clients:
                        try:
                            await bot.send_message(
                                tg_client, msg_text, disable_notification=True
                            )

                        except exceptions.TelegramBadRequest:
                            """ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∑–Ω–∞—á–∏—Ç —É–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫"""
                            logger.info(
                                f"Bot is blocked user - {tg_client}. Delete him."
                            )
                            BotInterface.unsub_tguser(tg_client)
                        except Exception as e:
                            logger.exception(f"–ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

        except Exception as e:
            logger.exception(f"aio_bot_start: {e}")
            await bot.send_message(admin_id, f"Exception {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
async def main():
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")
    dp.include_router(router)
    asyncio.create_task(scheduled())  # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
