class BotFunction:

    @staticmethod
    def convert_to_milliseconds(mmssms: [float, str]) -> int:
        """–ú–µ—Ç–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        01:02.563 = 62563
        02.563 = 2563
        45 = 45000
        """
        minutes: int
        seconds: float
        try:
            if type(mmssms) is float or type(mmssms) is int:
                return mmssms * 1_000
            mmssms = mmssms.split(":")
            if len(mmssms) == 1:
                minutes = 0
                seconds = float(mmssms[0])
            else:
                minutes = int(mmssms[0])
                seconds = float(mmssms[1])
        except ValueError:
            minutes = 0
            try:
                seconds = float(mmssms[0])
            except ValueError:
                return None
        return int(seconds * 1_000) + minutes * 60_000

    @staticmethod
    def msec_to_mmssms(milliseconds):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ milliseconds –Ω–∞ –≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            milliseconds = int(milliseconds)
        except ValueError:
            return None
        except TypeError:
            return None

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –Ω–∞ –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        minutes, milliseconds = divmod(milliseconds, 60_000)
        seconds, milliseconds = divmod(milliseconds, 1_000)
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã.–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã"
        mmssms_format: str = "{:02d}:{:02d}.{:03d}".format(minutes, seconds, milliseconds)
        return mmssms_format

    def make_calculate_text(self, best_time_ms):
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        text = f'üü¶ üáß: {self.msec_to_mmssms(best_time_ms)} - {self.msec_to_mmssms(best_time_ms * 1.05 - 1)} \n' \
               f'üü© –°1: {self.msec_to_mmssms(best_time_ms * 1.05)} - {self.msec_to_mmssms(best_time_ms * 1.10 - 1)} \n' \
               f'üü© –°2: {self.msec_to_mmssms(best_time_ms * 1.10)} - {self.msec_to_mmssms(best_time_ms * 1.15 - 1)} \n' \
               f'üü© –°3: {self.msec_to_mmssms(best_time_ms * 1.15)} - {self.msec_to_mmssms(best_time_ms * 1.20 - 1)} \n' \
               f'üü® D1: {self.msec_to_mmssms(best_time_ms * 1.20)} - {self.msec_to_mmssms(best_time_ms * 1.30 - 1)} \n' \
               f'üü® D2: {self.msec_to_mmssms(best_time_ms * 1.30)} - {self.msec_to_mmssms(best_time_ms * 1.40 - 1)} \n' \
               f'üü® D3: {self.msec_to_mmssms(best_time_ms * 1.40)} - {self.msec_to_mmssms(best_time_ms * 1.50 - 1)} \n' \
               f'üü® D4: {self.msec_to_mmssms(best_time_ms * 1.50)} - {self.msec_to_mmssms(best_time_ms * 1.60 - 1)} '
        return text


def main():
    pass


if __name__ == "__main__":
    main()
